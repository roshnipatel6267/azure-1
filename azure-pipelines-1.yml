trigger:
- dev

pr:
- dev

variables:
- name: TF_APPROVE
  value: 'no'  # Set a default value

- name: GUI_PROMPT
  value: 'no'  # Set to 'yes' if you want to use a GUI prompt

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: TerraformDeployment
  displayName: 'Terraform Deployment'
  steps:
    - checkout: self
      submodules: true

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        version: '3.x'
        performMultiLevelLookup: true

    - script: |
        ls -la
        pwd
        cd $(Build.SourcesDirectory)/azure-1
        pwd
        terraform init
      displayName: 'Terraform Init'

    - script: |
        cd $(Build.SourcesDirectory)/azure-1
        ls -la
        terraform validate
      displayName: 'Terraform Validate'

    - script: |
        az login 
      displayName: 'Azure Login'

    - script: |
        cd $(Build.SourcesDirectory)/azure-1
        terraform plan -out=tfplan -input=false
      displayName: 'Terraform Plan'

    - script: |
        if [ "$(GUI_PROMPT)" == "yes" ]; then
            # Use a GUI prompt (replace this with your GUI prompt logic)
            echo "Use GUI Prompt logic here."
            # Set TF_APPROVE based on GUI input
            # echo "##vso[task.setvariable variable=TF_APPROVE;isOutput=true]$GUI_PROMPT_VALUE"
        else
            # Use a command-line prompt
            read -p "Do you want to apply the Terraform changes? Type 'yes' to apply, or 'no' to cancel: " TF_APPROVE
            echo "##vso[task.setvariable variable=TF_APPROVE;isOutput=true]$TF_APPROVE"
        fi
      displayName: 'Prompt for Approval'

    - script: |
        if [ "$(TF_APPROVE)" == "yes" ]; then
            echo "Applying Terraform Changes..."
            cd $(Build.SourcesDirectory)/azure-1
            terraform apply -auto-approve tfplan
        else
            echo "Pipeline execution canceled."
        fi
      displayName: 'Apply Terraform Changes'
      condition: succeededOrFailed()
